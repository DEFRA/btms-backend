//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace Btms.Model.Cds;

/// <summary>
/// 
/// </summary>
public partial class Items  //
{
    public List<string> GetIdentifiers()
    {
        var list = new HashSet<string>();
        if (Documents != null)
        {
            foreach (var itemDocument in Documents)
            {
                if (MatchIdentifier.TryFromCds(itemDocument.DocumentReference!, out var identifier))
                {
                    list.Add(identifier.Identifier);
                }
            }
        }

        return list.ToList();
    }

    public void MergeChecks(DecisionItems decisionItems)
    {
        var checks = Checks?.ToList();
        if (checks == null)
        {
            checks = new List<Check>();
        }

        foreach (var decisionItemsCheck in decisionItems.Checks!)
        {
            var existing = checks.Find(x => x.CheckCode == decisionItemsCheck.CheckCode);
            if (existing != null)
            {
                existing.DecisionCode = decisionItemsCheck.DecisionCode;
                existing.DecisionReasons = decisionItemsCheck.DecisionReasons;
                existing.DecisionsValidUntil = decisionItemsCheck.DecisionsValidUntil;
                existing.DepartmentCode = decisionItemsCheck.DepartmentCode;
                existing.DecisionInternalFurtherDetail = decisionItemsCheck.DecisionInternalFurtherDetail;
            }
            else
            {
                checks.Add(new Check()
                {
                    CheckCode = decisionItemsCheck.CheckCode,
                    DecisionCode = decisionItemsCheck.DecisionCode,
                    DecisionReasons = decisionItemsCheck.DecisionReasons,
                    DecisionsValidUntil = decisionItemsCheck.DecisionsValidUntil,
                    DepartmentCode = decisionItemsCheck.DepartmentCode,
                    DecisionInternalFurtherDetail = decisionItemsCheck.DecisionInternalFurtherDetail
                });
            }
        }

        Checks = checks.ToArray();
    }

}