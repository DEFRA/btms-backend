@model Btms.Backend.Cli.Features.GenerateModels.DescriptorModel.ClassDescriptor
@inherits RazorLight.TemplatePage<Btms.Backend.Cli.Features.GenerateModels.DescriptorModel.ClassDescriptor>
@{
	DisableEncoding = true;
}
/*------------------------------------------------------------------------------
<auto-generated>
	This code was generated from the Mapper template.
	Manual changes to this file may cause unexpected behavior in your application.
	Manual changes to this file will be overwritten if the code is regenerated.
</auto-generated>
------------------------------------------------------------------------------*/
#nullable enable
@{
	var ns = $"{@Model.SourceNamespace}.Mapping;";
}
namespace @ns

public static class @Model.GetClassName()Mapper
{
	public static @Model.GetInternalFullClassName()? Map(@Model.GetSourceFullClassName()? from)
	{
		if (from == default) return default;

		var to = new @Model.GetInternalFullClassName() ();
@foreach (var property in Model.Properties.Where(x => !x.ExcludedFromInternal))
{
if (!string.IsNullOrEmpty(property.Mapper))
{
if (property.MappingInline)
{
var line = $"to.{property.GetInternalPropertyName()} = {property.Mapper}";
<text>        @line
</text>
}
else
{
var line = $"to.{property.GetInternalPropertyName()} = {property.Mapper}.Map(from.{@property.GetSourcePropertyName()});";
<text>        @line
</text> 
}
}
else
{
if (property.IsReferenceType)
{
if (property.IsArray)
{
var line = $"to.{property.GetInternalPropertyName()} = from.{property.GetSourcePropertyName()}?.Select(x => {property.GetPropertyTypeName()}Mapper.Map(x)).Where(x => x != null).ToArray()!;";
<text>        @line
</text>
}
else 
{
<text>        to.@property.GetInternalPropertyName() = @property.GetPropertyTypeName()Mapper.Map(from.@property.GetSourcePropertyName());
</text>
}
}
else
{
<text>        to.@property.GetInternalPropertyName() = from.@property.GetSourcePropertyName();
</text>
}
}
}
		return to;
	}
}
